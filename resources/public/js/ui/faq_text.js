// Compiled by ClojureScript 1.9.229 {:static-fns true, :optimize-constants true}
goog.provide('ui.faq_text');
goog.require('cljs.core');
goog.require('om.next');
goog.require('om_tools.dom');
ui.faq_text.faq_text = new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$3(React.DOM.div,({"key": "zup", "style": ({"display": "flex", "alignItems": "center", "flexDirection": "column", "margin": "2rem"})}),cljs.core.flatten((new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[(function (){var G__27142 = ({"src": "lisperati.png", "style": ({"marginBottom": "0.7rem"})});
return React.DOM.img(G__27142);
})(),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(React.DOM.table,({"style": ({"fontSize": "0.7rem", "padding": "0.3rem", "margin": "0.3rem", "backgroundColor": "black"})}),cljs.core.flatten((new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[om_tools.dom.element(React.DOM.tbody,om_tools.dom.element(React.DOM.tr,(function (){var G__27143 = ({"style": ({"textAlign": "right"})});
var G__27144 = "Twitter:";
return React.DOM.td(G__27143,G__27144);
})(),(new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[om_tools.dom.element(React.DOM.td,(function (){var G__27145 = ({"target": "_blank", "href": "http://twitter.com/lisperati"});
var G__27146 = "@lisperati";
return React.DOM.a(G__27145,G__27146);
})(),cljs.core.PersistentVector.EMPTY)],null))),(new cljs.core.PersistentVector(null,3,(5),cljs.core.PersistentVector.EMPTY_NODE,[om_tools.dom.element(React.DOM.tr,(function (){var G__27147 = ({"style": ({"textAlign": "right"})});
var G__27148 = "Blog:";
return React.DOM.td(G__27147,G__27148);
})(),(new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[om_tools.dom.element(React.DOM.td,(function (){var G__27149 = ({"target": "_blank", "href": "http://cointagion.com"});
var G__27150 = "cointagion.com";
return React.DOM.a(G__27149,G__27150);
})(),cljs.core.PersistentVector.EMPTY)],null))),om_tools.dom.element(React.DOM.tr,(function (){var G__27151 = ({"style": ({"textAlign": "right"})});
var G__27152 = "Github:";
return React.DOM.td(G__27151,G__27152);
})(),(new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[om_tools.dom.element(React.DOM.td,(function (){var G__27153 = ({"target": "_blank", "href": "http://github.com/drcode/ethereanmind"});
var G__27154 = "drcode";
return React.DOM.a(G__27153,G__27154);
})(),cljs.core.PersistentVector.EMPTY)],null))),om_tools.dom.element(React.DOM.tr,(function (){var G__27155 = ({"style": ({"textAlign": "right"})});
var G__27156 = "Reddit:";
return React.DOM.td(G__27155,G__27156);
})(),(new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[om_tools.dom.element(React.DOM.td,(function (){var G__27157 = ({"target": "_blank", "href": "https://www.reddit.com/user/drcode"});
var G__27158 = "u/drcode";
return React.DOM.a(G__27157,G__27158);
})(),cljs.core.PersistentVector.EMPTY)],null)))],null)))],null))))],null)))),(function (){var G__27159 = ({"key": (0)});
var G__27160 = "What is EthereanMind?";
return React.DOM.h2(G__27159,G__27160);
})(),(function (){var G__27161 = ({"key": (1)});
var G__27162 = "EthereanMind is a dapp (a \"Decentralized Autonomous Application\") and runs on the ethereum blockchain. This means that no \"web server\" is involved in running this application (In this beta version, there are still static files being hosted from a traditional web server.)";
return React.DOM.p(G__27161,G__27162);
})(),(function (){var G__27163 = ({"key": (2)});
var G__27164 = "EthereanMind is a tool to get the \"Temperature\" of the ethereum community by allowing users to propose issues that are on their mind, which are condensed into a prioritized list of the top ten items. To participate in the voting, holders of ether currency temporarily deposit their stake into the EthereanMind contracts.";
return React.DOM.p(G__27163,G__27164);
})(),(function (){var G__27165 = ({"key": (22)});
var G__27166 = "(Note: Until April 28th stakes are limited to a single ether finney, i.e. one penny USD, so that additional auditing of the staking system can first be performed.)";
return React.DOM.p(G__27165,G__27166);
})(),(function (){var G__27167 = ({"key": (3)});
var G__27168 = "Why did you create EthereanMind?";
return React.DOM.h2(G__27167,G__27168);
})(),(function (){var G__27169 = ({"key": (4)});
var G__27170 = "Ethereum is a great tool for experimenting with concepts of autonomous voting, decentralized organizations, decentralized decision making, as well as new types of governance models. EthereanMind is an attempt to create a minimally-viable smart contract system that illustrates these possibilities.";
return React.DOM.p(G__27169,G__27170);
})(),(function (){var G__27171 = ({"key": (5)});
var G__27172 = "Does someone who stakes more money get a bigger vote? Why?";
return React.DOM.h2(G__27171,G__27172);
})(),(function (){var G__27173 = ({"key": (6)});
var G__27174 = "Yes, EthereanMind is a pure plutocracy: Rich people get a larger vote. The dapp works that way because it is by far the easiest system to implement. In fact, developing an egalitarian voting system on blockchains is still largely an unsolved research problem. The reason for this is that it is very easy on blockchain systems for wealthy users to simply split their funds into multiple accounts and impersonate multiple people.";
return React.DOM.p(G__27173,G__27174);
})(),(function (){var G__27175 = ({"key": (7)});
var G__27176 = "Do you plan on making any money with EthereanMind?";
return React.DOM.h2(G__27175,G__27176);
})(),(function (){var G__27177 = ({"key": (8)});
var G__27178 = "No, this app has absolutely no fees and all stakers will be able to recover 100% funds (minus ethereum network fees.) At that point, I will make the official smart contracts public and provide cryptographic proof that the published code matches the deployed system. Any ethereum programmers will then be able to verify that all staked funds are safe.";
return React.DOM.p(G__27177,G__27178);
})(),(function (){var G__27179 = ({"key": (9)});
var G__27180 = "How does EthereanMind staking work, exactly?";
return React.DOM.h2(G__27179,G__27180);
})(),(function (){var G__27181 = ({"key": (10)});
var G__27182 = "There is a separate, very simple staking contract that has a \"Deposit\" function ethereum users can send their stake to. The stake can immediately be used for voting. At the point of deposit, a timer is set for 30 days that has to run out before deposted funds can be withdrawn. On request, deposited funds are returned to the sending address. (Note that a second deposit from the same account will reset the clock and require the full 30 day wait again.)";
return React.DOM.p(G__27181,G__27182);
})(),(function (){var G__27183 = ({"key": (11)});
var G__27184 = "The staking contract is extremely generic and has public functions that can be accessed from other contracts, for free. Ethereum developers: you are more than welcome to write other dapps that piggyback on the EtherenMind staking deposits- Let's build a smart contact ecosystem!";
return React.DOM.p(G__27183,G__27184);
})(),(function (){var G__27185 = ({"key": (12)});
var G__27186 = "How do EthereanMind Proposals work?";
return React.DOM.h2(G__27185,G__27186);
})(),(function (){var G__27187 = ({"key": (13)});
var G__27188 = "Anyone who has deposited stake into EthereanMind is welcome to submit new proposals for items in the \"Current Items\" and which will be mapped onto the brain animation in proportion to their votes. All stake from the user will automatically be used to vote up this proposed item. Other users can vote proposed items up or down as well. However, only one proposal action can be done by a staker each day (though you're welcome to stake from multiple accounts if you want to perform multple proposal actions.)";
return React.DOM.p(G__27187,G__27188);
})(),(function (){var G__27189 = ({"key": (14)});
var G__27190 = "Roughly once a day, the highest voted proposal will replace the worst of the 10 items in the main items list.";
return React.DOM.p(G__27189,G__27190);
})(),(function (){var G__27191 = ({"key": (15)});
var G__27192 = "How do EtherenMind Items work?";
return React.DOM.h2(G__27191,G__27192);
})(),(function (){var G__27193 = ({"key": (16)});
var G__27194 = "Once an item has graduated from the daily list of proposed items to the \"top ten list\", it can be voted on again. This vote determines how large a brain region it maps to, as well as to make sure it doesn't fall off the bottom of the list. A single staker can only vote up one item, as well as down one item, at a time. After an item is voted on, a user's stake will continue to affect that item indefinitely, as long as the given item remains on the list. The \"current item list\" additionally discounts older votes over time (in the same manner as you're used to on sites like reddit/ycominator/etc)";
return React.DOM.p(G__27193,G__27194);
})(),(function (){var G__27195 = ({"key": (17)});
var G__27196 = "Where can I get updates on this project, and learn more about future plans?";
return React.DOM.h2(G__27195,G__27196);
})(),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(React.DOM.p,({"key": (18)}),cljs.core.flatten((new cljs.core.PersistentVector(null,5,(5),cljs.core.PersistentVector.EMPTY_NODE,["Check out my ",(function (){var G__27197 = ({"target": "_blank", "href": "http://cointagion.com"});
var G__27198 = "blog";
return React.DOM.a(G__27197,G__27198);
})()," for deeper technical information or browse the ",(function (){var G__27199 = ({"target": "_blank", "href": "https://github.com/drcode/ethereanmind"});
var G__27200 = "source code";
return React.DOM.a(G__27199,G__27200);
})(),"."],null))))], null);
